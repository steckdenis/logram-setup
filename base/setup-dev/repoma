#!/bin/bash

action=$1

# Script de gestion d'un dépôt
source conf/config.sh

usage()
{
    echo "Logram Repository Manager v0.1"
    echo
    echo "Usage: $0 action [parameters]"
    echo "    - action     : One of the following actions"
    echo "    - parameters : Parameters"
    echo
    echo "Actions:"
    echo "    - prepare <package> : Prepare a package for importing"
    echo "    - include <package> : Include a package in the distribution specified in its .control"
    echo "    - tellv4            : Ask the v4 to import the packages in its database"
    echo "    - export            : Export the distributions"
    echo "    - process           : Process all the packages in incoming"
}

prepare()
{
    # $1 = chemin d'accès d'un .tlz
    file=$1
    name=$(basename $file | cut -d '~' -f 1)

    echo ">> Importing $name..."

    # 1. Décompresser
    mkdir tmp
    cd tmp

    tar --lzma -xf $file

    cd ..

    # 2. Copier le Control
    cp tmp/__LOGRAM/control $INCOMING/$(basename $file .tlz).control

    # 3. Copier les fichiers de traduction
    cp tmp/__LOGRAM/$name.* $INCOMING

    # 4. Supprimer le tmp
    rm -rf tmp
}

include()
{
    # $1 = chemin d'accès d'un .tlz
    filename=$1
    bname=$(basename $filename)
    name=$(echo $bname | cut -d '~' -f 1)
    arch=$(echo | awk "{ c = split(\"$bname\", a, \".\"); print a[c-1] }")

    echo ">> Including $name ($arch)..."

    # Créer l'architecture de dossiers
    if [ "${name:0:3}" = "lib" ]; then
        d=${name:0:4}
    else
        d=${name:0:1}
    fi

    dir=$POOL/$d/$name
    mkdir -p $dir

    # Copier le fichier .tlz dedans
    cp $filename $dir

    # Copier le fichier .control également
    if [[ ! $filename == *.src.tlz ]]; then
        # Le fichier control contient [Binary], le remplacer la le nom du paquet
        firstline="true"
        content=""
        while read line; do
            if [ $firstline = "true" ]; then
                firstline="false"
                continue
            fi

            # Rajouter la ligne dans content (elle contient le \n)
            content="$content$line\n"

            # Si on a la distribution, la prendre
            if [ ${line:0:12} = "Distribution" ]; then
                distrib=${line:13}
            fi
        done < $INCOMING/$(basename $filename .tlz).control

        # Écrire dans dists/<distrib>/<arch>/parts/<d>/<name>.control, puisqu'on n'a
        cdir=$DISTS/$distrib/$arch/parts/$d

        mkdir -p $cdir

        echo "[$name]" > $cdir/$name.control
        echo "Url=pool/$d/$name/$bname" >> $cdir/$name.control
        echo -e "$content" >> $cdir/$name.control

        # Copier et adapter tous les fichiers langue du paquet (<name>.*)
        for lang in $INCOMING/$name.*
        do
            cname=$cdir/$(basename $lang)

            echo "$name" > $cname

            # Lire les lignes
            step="0"

            while read line; do
                if [ $step = "0" ]; then
                    echo "$line" >> $cname
                    step="1"
                elif [ $step = "1" ]; then
                    # Sauter la ligne vide après
                    step="2"
                elif [ $step = "2" ]; then
                    echo "$line" >> $cname
                    step="3"
                elif [ $step = "3" ]; then
                    # Sauter la ligne vide
                    step="4"
                else
                    echo "$line" >> $cname
                fi
            done < $lang

            # Bien terminer le machin
            echo "." >> $cname
            echo >> $cname
        done
    fi

    # Générer la liste des fichiers
    tar --lzma --list -f $filename > $dir/$(basename $filename).files
}

tellv4()
{
    rs=$(wget -q -O - $V4URL)

    if [ "$rs" != "Done" ]; then
        echo "v4 failed !"
        exit 1
    fi
}

exp()
{
    # Explorer les distributions
    for distro in $DISTS/*
    do
        dname=$(basename $distro)
        
        # Explorer les architectures
        for arch in $distro/*
        do
            aname=$(basename $arch)
            
            echo -n ">> $dname ($aname)..."

            # Bêtement concaténer le contenu des fichiers de parts
            find $arch/parts -name '*.control' -exec cat {} \; | lzma > $arch/packages.lzma

            # Générer les fichiers de langue
            for lang in $LANGS
            do
                find $arch/parts -name "*.$lang" -exec cat {} \; | lzma > $arch/translate.$lang.lzma
            done

            echo " done"
        done
    done
}

process()
{
    # Explore les fichiers .tlz dans incoming et les importe
    for fl in `ls $INCOMING/*.tlz`
    do
        if [ ! -f "$fl" ]; then
            break
        fi

        # Préparer le paquet (seulement un binaire)
        if [[ ! $fl == *.src.tlz ]]; then
            prepare $fl
        fi

        # Importer le paquet
        include $fl
    done

    # Demande à la v4 de recharger sa liste
    tellv4
}

case $action in
    help)
        usage
        ;;
    prepare)
        prepare $2
        ;;
    include)
        include $2
        ;;
    process)
        process
        ;;
    tellv4)
        tellv4
        ;;
    export)
        exp
        ;;
    *)
        usage
        ;;
esac