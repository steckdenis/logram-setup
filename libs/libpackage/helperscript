#!/bin/bash

# $1 = action (install, remove, update)
###############################################################
#    # install        # remove            # update            #
###############################################################
# $2 # nom du paquet  # nom du paquet     # nom du paquet     #
# $3 # version        # version           # nouvelle version  #
# $4 # chemin du .tlz # préfixe d'install # chemin du .tlz    #
# $5 # préfixe d'inst # bool purge        # préfixe d'install #
# $6 #                #                   # version installée #
###############################################################

#################
#### Fonctions d'aide pour le pkgbuild
#################

communicate()
{
    # Nom de la communication
    str="[[>>|$1"
    
    # Paramètres
    shift
    
    while [ ${#1} -ne 0 ]; do
        str="$str|$1|$2"
        
        shift 2
    done
    
    str="$str|<<]]"
    /bin/echo "$str" >&2
    
    # Attendre une réponse, et l'échoer, ce qui permet d'attendre que l'utilisateur ait lu le message,
    # répondu à une question (et dans ce cas la réponse nous arrive), etc
    read rs
    echo "$rs"
}

#################
#### Fonctions d'installation/suppression
#################

depack()
{
    # $1 = nom du paquet
    # $2 = version du paquet
    # $3 = chemin du .tlz
    # $4 = préfixe d'installation

    # Créer le dossier temporaire de l'extraction
    tempdir="$4/var/cache/lgrpkg/temp/$1_$2"
    mkdir -p "$tempdir" || exit 1

    # Se placer dedans et y extraire l'archive
    pwd="$PWD"
    
    cd "$tempdir" || exit 1
    tar --lzma -xf "$3" || exit 1

    cd "$pwd" || exit 1
}

inst()
{
    # $1 = nom du paquet
    # $2 = version du paquet
    # $3 = chemin du .tlz
    # $4 = préfixe d'installation

    tempdir="$4/var/cache/lgrpkg/temp/$1_$2"
    pwd="$PWD"
    cd "$tempdir" || exit 1

    # Trouver la liste des fichiers à copier, et les copier
    find -not -type d | grep -v __LOGRAM > "/tmp/$1$2_files" || exit 1

    cat "/tmp/$1$2_files" | xargs "-d\n" cp -a --parents -t "$4" || exit 1

    # Enregistrer la liste des fichiers dans la base de donnée (format texte)
    dbdir="$4/var/cache/lgrpkg/db/pkgs/$1_$2"
    mkdir -p "$dbdir" || exit 1
    
    mv "/tmp/$1$2_files" "$dbdir/files.list" || exit 1

    # Enregistrer le pkgbuild dans cette même base de donnée
    cp __LOGRAM/pkgbuild.sh "$dbdir" || exit 1
    cp __LOGRAM/metadata.xml "$dbdir" || exit 1

    # Revenir au dossier
    cd "$pwd" || exit 1

    # Supprimer le dossier temporaire
    rm -rf "$tempdir" || exit 1
}

remove()
{
    # $1 = nom du paquet
    # $2 = version du paquet
    # $3 = préfixe d'installation
    # $4 = true si on purge, false sinon

    dbdir="$3/var/cache/lgrpkg/db/pkgs/$1_$2"
    
    # Si on ne purge pas, ne pas supprimer les fichiers dans /etc
    if [ "$4" = "false" ]; then
        grepfilter="| grep -v ./etc"
    fi
    
    # Explorer les fichiers installés pour les supprimer
    cat "$dbdir/files.list" $grepfilter | (while read line; do
        line="$3/$line"
        
        rm -f "$line"
        
        # Supprimer tous les dossiers parents vides
        pdir=$(dirname "$line")
        
        while [[ ( -d "$pdir" ) && ( "$pdir" != "$3" ) && ( "$pdir/" != "$3" ) ]]; do
            numfiles=$(ls "$pdir" | wc -l)
            
            if [ "$numfiles" == "0" ]; then
                rmdir "$pdir"
            else
                break
            fi
            
            # Essayer avec le dossier parent
            pdir=$(dirname "$pdir")
        done
    done)
    
    # Supprimer le dossier contenant les informations sur ce fichier
    rm -rf "$dbdir"
}

update()
{
    # $1 = nom du paquet
    # $2 = nouvelle version
    # $3 = chemin du .tlz
    # $4 = préfixe d'install
    # $5 = version installée
    
    #### Faire comme une installation ####
    tempdir="$4/var/cache/lgrpkg/temp/$1_$2"
    pwd="$PWD"
    cd "$tempdir" || exit 1

    # Trouver la liste des fichiers à copier, et les copier
    find -not -type d | grep -v __LOGRAM > "/tmp/$1$2_files" || exit 1

    cat "/tmp/$1$2_files" | xargs "-d\n" cp -a --parents -t "$4" || exit 1

    # Enregistrer la liste des fichiers dans la base de donnée (format texte)
    newdbdir="$4/var/cache/lgrpkg/db/pkgs/$1_$2"
    mkdir -p "$newdbdir" || exit 1
    
    mv "/tmp/$1$2_files" "$newdbdir/files.list" || exit 1

    # Enregistrer le pkgbuild dans cette même base de donnée
    cp __LOGRAM/pkgbuild.sh "$newdbdir" || exit 1
    cp __LOGRAM/metadata.xml "$newdbdir" || exit 1

    # Revenir au dossier
    cd "$pwd" || exit 1

    # Supprimer le dossier temporaire
    rm -rf "$tempdir" || exit 1
    
    #### Faire comme une suppression, mais garder les fichiers communs aux deux versions ####
    olddbdir="$4/var/cache/lgrpkg/db/pkgs/$1_$5"
    
    # Explorer les fichiers installés non-mis à jour pour les supprimer
    cat "$olddbdir/files.list" | grep -v -F -f "$newdbdir/files.list" | (while read line; do
        line="$4/$line"
        
        rm -f "$line"
        
        # Supprimer tous les dossiers parents vides
        pdir=$(dirname "$line")
        
        while [[ ( -d "$pdir" ) && ( "$pdir" != "$4" ) && ( "$pdir/" != "$4" ) ]]; do
            numfiles=$(ls "$pdir" | wc -l)
            
            if [ "$numfiles" == "0" ]; then
                rmdir "$pdir"
            else
                break
            fi
            
            # Essayer avec le dossier parent
            pdir=$(dirname "$pdir")
        done
    done)
    
    # Supprimer le dossier contenant les informations sur ce fichier
    rm -rf "$olddbdir"
}

case "$1" in
    install)
        depack "$2" "$3" "$4" "$5" || exit 1
        
        source "$5/var/cache/lgrpkg/temp/$2_$3/__LOGRAM/pkgbuild.sh" || exit 1

        preinst "$2" "$3" "$5" || exit 1
        inst "$2" "$3" "$4" "$5" || exit 1
        postinst "$2" "$3" "$5" || exit 1
        ;;
    remove)
        dbdir="$4/var/cache/lgrpkg/db/pkgs/$2_$3"
        
        source "$dbdir/pkgbuild.sh" || exit 1
        
        prerm "$2" "$3" "$4" "$5" || exit 1
        remove "$2" "$3" "$4" "$5" || exit 1
        postrm "$2" "$3" "$4" "$5" || exit 1
        ;;
    update)
        depack "$2" "$3" "$4" "$5" || exit 1
        
        source "$5/var/cache/lgrpkg/temp/$2_$3/__LOGRAM/pkgbuild.sh" || exit 1
        
        # TODO: Gérer le "false" : true si on downgrade. Toujours utiliser le pkgbuild du paquet
        # le plus récent
        preupd "$2" "$3" "$5" "$6" "false" || exit 1
        update "$2" "$3" "$4" "$5" "$6" || exit 1
        postupd "$2" "$3" "$5" "$6" "false" || exit 1
esac

exit 0